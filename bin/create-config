#!/usr/bin/env node

var fs = require("fs");
var path = require("path");
var url = require("url");
var gitClone = require("git-clone/promise");

var envValues = require("./common/env-values");
var appRoot = path.join(__dirname, "..");

function createConfig() {
  var fileStorage, storage;

  fileStorage = true;
  storage = {
    active: "cloudinary",
    cloudinary: {
      useDatedFolder: false,
      upload: {
        use_filename: true,
        unique_filename: false,
        overwrite: false,
        folder: "ghost-blog-images-" + process.env.THEME_DIR_NAME,
        tags: ["blog"],
      },
      fetch: {
        quality: "auto",
        secure: true,
        cdn_subdomain: true,
      },
    },
  };

  config = {
    url: process.env.APP_PUBLIC_URL,
    logging: {
      level: "info",
      transports: ["stdout"],
    },
    mail: {
      transport: "SMTP",
      options: {
        service: "Mailgun",
        auth: {
          user: process.env.MAILGUN_SMTP_LOGIN,
          pass: process.env.MAILGUN_SMTP_PASSWORD,
        },
      },
    },
    fileStorage: fileStorage,
    storage: storage,
    database: {
      client: "mysql",
      connection: getMysqlConfig(envValues.mysqlDatabaseUrl),
      pool: { min: 0, max: 5 },
      debug: false,
    },
    server: {
      host: "0.0.0.0",
      port: process.env.PORT,
    },
    paths: {
      contentPath: path.join(appRoot, "/content/"),
    },
  };

  return config;
}

function getMysqlConfig(connectionUrl) {
  if (connectionUrl == null) {
    return {};
  }

  var dbConfig = url.parse(connectionUrl);
  if (dbConfig == null) {
    return {};
  }

  var dbAuth = dbConfig.auth ? dbConfig.auth.split(":") : [];
  var dbUser = dbAuth[0];
  var dbPassword = dbAuth[1];

  if (dbConfig.pathname == null) {
    var dbName = "ghost";
  } else {
    var dbName = dbConfig.pathname.split("/")[1];
  }

  var dbConnection = {
    host: dbConfig.hostname,
    port: dbConfig.port || "3306",
    user: dbUser,
    password: dbPassword,
    database: dbName,
  };
  return dbConnection;
}

if (!!process.env.THEME_RIPOSITORY) {
  async function getTheme() {
    await gitClone(
      process.env.THEME_RIPOSITORY,
      path.join(appRoot, "/content/themes/" + process.env.THEME_DIR_NAME)
    );
  }
  getTheme();
}

var configContents = JSON.stringify(createConfig(), null, 2);
fs.writeFileSync(path.join(appRoot, "config.production.json"), configContents);
